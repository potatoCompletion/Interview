<스크래핑>
1. Winform에서 WPF 전환의 이점
- 윈도우의 표준 컨트롤에 의존하는 Winform과 달리 WPF는 의존하지 않기 때문에 자유로운 컨트롤 사용이 가능하다
ex) 버튼 안에 이미지가 들어가야 한다고 했을 때 Winform은 불가능하다. 하지만 WPF는 버튼 패널 내부에 이미지 패널을 넣으면 끝난다.

2. MVVM 패턴이란?
- Model - View - ViewModel 로 이루어진 패턴
- MVP 패턴에서 View와 Presenter 간의 의존성을 해결하기 위해 나온 패턴
- Data Binding 을 이용해 View와 ViewModel 간의 의존성 문제를 해결한다. (한가지의 ViewModel을 여러 View에서 이용할 수 있다)

3. 비동기 처리 도입 시 문제점
- 아직 하나의 태스크가 완료되지 않은 상태에서 새로운 동작을 요청할 때, CancellationToken 이라는 객체를 이용해서 해결했다.
- 해당 토큰을 이용하면 현재 진행중인 비동기 작업에 대해 중지를 요청할 수 있어 중지 후에 새로운 작업을 실행 가능하다.


<전자문서>
1. MyBatis
- JDBC를 통해 데이터베이스에 엑세스하는 작업을 캡슐화하고 일반 SQL 쿼리, 저장 프로 시저 및 고급 매핑을 지원하며 모든 JDBC 코드 및 매개 변수의 중복작업을 제거 합니다.
Mybatis에서는 프로그램에 있는 SQL쿼리들을 한 구성파일에 구성하여 프로그램 코드와 SQL을 분리할 수 있는 장점을 가지고 있습니다.

2. JPA
- 유연하게 데이터베이스를 변경할 수 있다는 부분이 가장 마음에 들었다.
운영시에는 MariaDB로 운영했지만 JUnit 테스트 시에 H2 DB로 변경해서 테스트 하기가 용이했다.
쿼리를 짜느라 들어가는 시간을 대폭 줄여줄 수 있었다.

- n+1 문제 해결?
연관 관계가 설정된 엔티티를 조회할 경우에 조회된 데이터 개수 만큼 연관관계의 조회 쿼리가 추가로 발생하여 데이터를 읽어오게 된다. 이를 n+1 문제라고 한다.
QueryDSL의 fetch join을 사용해서 문제를 해결했다.

3. QueryDSL
- JPA에서 기본적으로 제공해주는 메서드를 사용하더라도 원하는 조건의 데이터를 수집하기 위해서는 필연적으로 JPQL을 작성해야 한다.
하지만 JPQL은 컴파일 시점에서 쿼리 오류 찾아낼 수 없고, 이는 개발에 있어 어려움을 증폭시킨다.
QueryDSL을 사용하면 컴파일 시점에서 쿼리 오류를 쉽게 잡아낼 수 있고, 자동 완성 등 IDE의 도움을 받을 수도 있다.
또한 MyBatis에 비해 동적인 쿼리 작성이 편리하다.

4. Redis
- 레디스 서버 구축을 당시에 계시던 팀원분이 하셨는데 최근에 다시 서버를 보니까 문제점이 보였다.
서버 2대에 각각 마스터1과 센티널1, 레플리카1과 센티널2 이런 식으로 구성이 되어 있는데
마스터 서버의 물리서버가 나갈 시에 센티널이 2개가 되어 투표가 정상적인 페일오버가 일어나기 어려워진다.
그래서 서버 한 대를 더 두고 추후에 레디스 사양 업그레이드를 위해 클러스터로 변경을 고려 중이다.
