<모니터링>
1. 기존 모니터링 프로그램의 개선 버전 개발
- 기존에 팀에서 사용하던 모니터링 프로그램의 치명적인 단점이 있었습니다.
관리하는 모듈 버전이 세 가지인데, 그 중 한 가지의 버전 밖에 호환이 되지 않았습니다.
그래서 테스트가 가능하던 2.0 모듈에 비해서 5.0 모듈의 작업 안정성이 많이 떨어졌고, 이러한 이슈를 해결하기 위해 모니터링의 개선 버전을 개발하게 되었습니다.
세 가지 모듈의 이름이 동일했기 때문에 하나의 프로그램에 라이브러리를 동시에 추가할 수 없기도 하였고,
그렇다고 해서 모듈의 이름을 버전 별로 구분하기에는 이미 저희 모듈을 이용해 서비스 중인 플랫폼들이 많아 너무 큰 작업이 될 수 밖에 없던 상황이었습니다.
또, 어떻게든 작업을 해서 이름 구분에 성공을 한다고 해도 메인 동작 프로그램의 버전 자체가 2.0 이었기 때문에 더 상위 버전 라이브러리에 대한 호환이 안되는 상황이었습니다.
그래서 메인 프로그램을 하나 만들고 세 개의 스크래핑 실행 프로그램을 각각 만들어서 호출하는 방식을 생각해냈습니다.
이렇게 되면 특정 모듈의 버전과 상관없이 버전 별 테스트가 가능했기 때문입니다.
우선 성능 이슈와 내부 로직을 정리하기 위해 프레임워크 버전 업그레이드를 진행했습니다.
또한 프로그램의 디자인, 반응속도 개선, 로직의 분리로 인한 유지보수성의 향상 등을 위해 Winform에서 Wpf로 프레임워크를 변경했습니다.
이 과정에서 MVVM 패턴을 적용해서 비즈니스 로직과 프레젠테이션 로직의 분리를 해서 유지보수성을 높였고, 레이어 간의 의존 관계를 낮춰 코드의 재사용성을 증가시켰습니다.
그렇게 진행한 결과 세 가지 버전 혹은 다음에 또 다른 버전이 추가되더라도 확장가능한 프로그램을 구현했고, 현재 팀에 안정적으로 운영 중입니다.

2. 로그 조회 페이지 로딩속도 개선
- 기존 프로그램을 사용하면서 페이지를 이동할 때마다 너무 로딩이 느리고 페이지를 이동하고 나면 기존에 작업하던 것들이 다 날아가 버려서 불편함을 많이 느꼈습니다.
그래서 코드를 직접 보니까 페이지를 이동할 때마다 new 키워드를 통해서 새로운 인스턴스를 계속해서 생성하고 있었습니다.
항상 새로운 페이지를 만들어서 뿌려주면 로딩속도도 느려지고, 이전 페이지에서 하던 작업들이 모두 날아가 버리기 때문에 굉장히 비효율적이라고 생각했습니다.
그래서 DI 개념을 프로그램에 접목시켜서 최초에 생성된 페이지 인스턴스 하나만 가지고 페이지를 로딩할 수 있게 변경했습니다.
그 결과, 그 전과는 비교할 수 없을 정도로 로딩 개선속도 개선이 되었고 더 나아가서 업무 능률에도 긍정적인 효과를 줄 수 있었습니다.

- 프로그램의 페이지 중에 로그 조회를 할 수 있는 페이지가 있습니다.
해당 페이지 내에는 오늘 진행한 모든 스크래핑 전체 건 수, 성공 건 수, 실패 건 수 등 다양한 카운트를 보여주고 스크래핑 리스트를 보여주는 페이지입니다.
보통 에러에 대한 문의가 들어올 때 이 페이지에서 검색으로 에러가 발생한 건을 특정하고 원격 서버를 접속하거나 하는 용도로 사용합니다.
근데 이 검색 속도가 한 번 검색할 때 마다 대략 50초에서 1분 가까이 발생해서 업무에 지장이 있었습니다.
그래서 코드를 분석해보니, 실제 특정 건 수를 조회하는 것은 오래걸리지 않는데 카운트 쿼리가 대부분의 시간을 소모하고 있었습니다.
처음에는 카운트 쿼리 튜닝을 시도했습니다.
left outer join을 사용한 쿼리가 굉장히 많아서 성능에 이슈가 있다고 생각했고, 이를 inner join으로 바꾸려고 시도했습니다.
그러나, 팀의 테이블 자체가 inner join을 사용할 수 없게 설계가 되어있었고, left outer join을 하지 않으면 정확한 결과를 얻을 수 없었습니다.
그래서 기존에 동기화 되어있던 카운트 쿼리 조회와 리스트 조회를 비동기화 해서 따로 각각 따로 작업하도록 변경했습니다.
우선 먼저 조회되는 리스트 조회에 대한 결과를 먼저 뿌려주고, 카운트 쿼리는 응답이 오는 대로 화면에 반영하도록 개선했습니다.
그 결과, 페이지 로딩 속도도 개선이 되었고, 효율적으로 업무를 처리할 수 있었습니다.

