사용자의 Action들은 Controller에 들어오게 됩니다.
Controller는 사용자의 Action을 확인하고, Model 을 업데이트 합니다.
Controller는 Model를 나타내줄 View를 선택합니다.
View는 Model을 이용하여 화면을 나타냅니다.
<단점>
MVC 패턴의 단점은 View와 Model 사이의 의존성이 높다는 점. View와 Model의 높은 의존성은 어플리케이션이 커질수록 복잡해지고 유지보수가 어려워집니다.
<내 생각>
View가 Model에 맞춰질 수 밖에 없다 == View와 Model 사이에 강한 의존성이 형성된다.
<MVC 패턴을 사용하는 목적>
View와 Model 사이에 Controller를 두어 View와 Model의 의존성(Dependency)을 없앰

BUT
실제로는 View에서 Model을 이용하기 때문에 View와 Model은 의존적임
(Model update -> View update)
복잡한 대규모 프로그램을 개발하면서 문제점 확인됨



사용자의 Action들은 View를 통해 들어오게 됩니다.
View에 Action이 들어오면, Command 패턴으로 View Model에 Action을 전달합니다.
View Model은 Model에게 데이터를 요청합니다.
Model은 View Model에게 요청받은 데이터를 응답합니다.
View Model은 응답 받은 데이터를 가공하여 저장합니다.
View는 View Model과 Data Binding을 하여 화면에 나타냅니다.
<장점>
MVVM 패턴은 View와 Model 사이의 의존성이 없습니다. 또한 Command 패턴과 Data Binding을 사용하여 View와 View Model 사이의 의존성 또한 없앤 디자인 패턴입니다.