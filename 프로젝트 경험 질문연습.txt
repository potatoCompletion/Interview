<스크래핑>
1. 서비스 성능 개선 
- http 통신 중 500 error가 났을 때
기존 2.0, 4.0 모듈 혹은 피들러는 자체적으로 재처리에 대한 로직이 들어가 있는데
5.0 모듈은 재처리를 자체적으로 하지 않아 통신 장애가 많이 발생했던 것.
재처리 로직을 직접 추가해주니 15% -> 0.05% 까지 오류율을 감소시킬 수 있었다.

2. 서비스 장애 시 대응 속도 개선
- 에러메시지를 세분화 해 오류 파악을 용이하게 했다.
- 에러 로그를 기록할 때 응답 데이터 전체를 기록하게 한다던지, 콜스택을 남긴다던지 등의 작업을 하며 에러 대응 속도 개선을 위해 노력을 했다.

3. 서버 구축 자동화 스크립트 개발 / 운영 성능 개선
- 반복적이고 부정확한 서버 구축작업의 개선을 위해 배치파일, 스크립트를 작성해 자동화 할 수 있도록 하였다.
- 팀에 로그 자동삭제 배치가 없어 스크립트를 작성해 일정 기간이 지난 로그를 삭제해주는 배치파일을 만들어 불필요한 작업을 최소화하고 
서버의 운영 효율을 증가시켰다.

4. 서비스 리팩토링
- 팀에서 관리하는 모듈들이 굉장히 긴 하나의 메서드로 작업 되어 있는 경우가 많아, 동작 로직 파악에 어려움이 있었고
오류가 발생했을 때 로그에 콜스택을 남겨도 해당 오류가 어디서 발생했는지 확인이 어려워 대응에 시간이 오래 걸렸다.
이를 개선하기 위해 팀 모듈의 리팩토링을 생활화해 코드의 가독성, 오류 대응 개선을 위해 노력해 왔습니다.

5. 테스트 코드 관련 시도, 실패에 대한 아쉬움
- 입사하고 처음으로 사고를 쳤을 때가 기억난다. 여느 때와 같이 레거시 코드에 대한 리팩토링을 진행 중이었는데, 
DB에 적재하는 로직을 중복해서 넣어버렸다. 다행히 운영 팀에서 빠르게 문제를 파악해 주셔서 일이 크게 번지진 않았지만
정말 아찔한 순간이었다. 팀원들에게 미안함, 나 자신에 대한 실망감 때문에 힘들었다.
반성하며 문제를 되짚어 보니, 물론 나의 실수가 가장 큰 이유이지만, 작업자 한 명의 판단으로 이러한 장애가 날 수 있는 환경에도 문제가 있다고 느껴졌다.
그래서 팀장님께 면담 요청을 드리고 팀에 CI/CD 도입을 하자고 의견을 제시했다. 

6. 에러로그의 중요성, 메서드 세분화 및 클래스 분리의 중요성
- 